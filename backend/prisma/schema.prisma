generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(uuid())
  title       String
  price       Int
  description String
  gender      EGender?
  images      String[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  colors        Color[]
  sizes         Size[]
  reviews       Review[]
  cartItems     CartItem[]
  favoriteItems FavoriteItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(uuid())
  name String
  slug String @unique

  products Product[]
}

model Color {
  id    String @id @default(uuid())
  name  String
  value String

  products  Product[]
  cartItems CartItem[]
}

model Size {
  id          String  @id @default(uuid())
  size        String
  isAvailable Boolean

  products  Product[]
  cartItems CartItem[]
}

model User {
  id String @id @default(uuid())

  name     String?
  email    String  @unique
  image    String?
  password String

  cart          Cart?
  role          ERole          @default(USER)
  gender        EGender?
  reviews       Review[]
  favoriteItems FavoriteItem[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(uuid())

  totalPrice Int @default(0)

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(uuid())

  quantity Int @default(1)

  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())

  title  String?
  text   String?
  rating Int
  image  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FavoriteItem {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  products CartItem[]

  email        String
  firstname    String
  lastname     String
  address      String
  phone        String
  deliveryType EDeliveryType
  totalPrice   Int
  status       EnumOrderStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ERole {
  USER
  ADMIN
}

enum EGender {
  men
  women
}

enum EDeliveryType {
  store
  standard
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
